"cluster2" = cluster2[cluster2!=0]))
}
## Test
p1 <- c(1, 4, 4, 3, 4, 3, 4, 4)
p2 <- c(1, 4, 3, 3, 4, 3, 4, 3)
p3 <- c(1, 2, 2, 2, 2, 2, 2, 2)
MapAllocationsToClusters(sigma = s.bar, particle = p1)
#****************************************************
#'  Mapping from clustering to allocation decisions
#'
#' @param sigma Uniform permutation on closure of anchors (output from SamplePermutation) [vector]
#' @param cluster.list list consisting of cluster1 and cluster2 [list]
#' @return corresponding allocation decison [vector]
MapClustersToAllocations<- function(sigma, cluster.list)
{
n <- length(sigma)
c1 <- cluster.list$cluster1; len1 <- length(c1)
c2 <- cluster.list$cluster2; len2 <- length(c2)
# if only 1 cluster, then allocation decision was merge
if(is.null(c2))
{
return(c(1, rep(2, n-1)))
}
# otherwise work backwards from clustering
particle <- rep(0, n); particle[1:2] <- c(1, 4)
counter.c1 <- counter.c2 <- 2
for(t in 3:n)
{
# if cluster 1 is not yet accounted for AND the relevant sigma comes from cluster 1
if(counter.c1 <= len1 && sigma[t] == c1[counter.c1])
{
particle[t] <- 3
counter.c1 <- counter.c1 + 1
}
# if cluster 2 is not yet accounted for AND the relevant sigma comes from cluster 2
if(counter.c2 <= len2 && sigma[t] == c2[counter.c2])
{
particle[t] <- 4
counter.c2 <- counter.c2 + 1
}
}
return(particle)
}
## Test
cluster.list <- MapAllocationsToClusters(sigma = s.bar, particle = p1)
MapClustersToAllocations(sigma = s.bar, cluster.list)
p3
#****************************************************
#'  Proposal distribution
#'
#' @param sigma Uniform permutation on closure of anchors (output from SamplePermutation) [vector]
#' @param prev.allocation Previous allocation decision [scalar]
#' @return
Proposal <- function(sigma, prev.allocation)
{
}
#****************************************************
#'  Improved intermediate target distribution ("Gamma hat")
#'
#' @param sigma Uniform permutation on closure of anchors (output from SamplePermutation) [vector]
#' @param prev.allocation Previous allocation decision [scalar]
#' @return
ImprovedIntermediateTarget <- function()
{
}
#****************************************************
#'  Intermediate target distribution at time t ("Gamma"_t)
#'
#' @param sigma Uniform permutation on closure of anchors (output from SamplePermutation) [vector]
#' @param particle Sequence of allocation decisions at time t [vector]
#' @return
IntermediateTarget <- function(sigma, particle)
{
}
#****************************************************
#'  Particle Gibbs Split Merge algorithm
#'
#' @param s Anchors  [vector]
#' @param s.bar Closure of anchors [vector]
#' @param c.bar Restricted clusters
#' @param pi.bar Restricted target
#' @param N Number of particles
#' @return Updated clustering
ParticleGibbsSplitMerge <- function(s, s.bar, c.bar, pi.bar, N)
{
# uniform permutation on elements of s.bar - with anchors 1st and 2nd
sigma <- SamplePermutation(s, s.bar)
n <- length(sigma)
# calculate the conditional path
cond.path <- MapClustersToAllocations(sigma = s.bar, cluster.list = c.bar)
# define particle matrix & fix 1st particle of each generation to conditional path
particles <- matrix(rep(0, N*n), c(N, n))
particles[1,] <- cond.path
particles[,1] <- rep(1, N)
# define importance weights matrix and define weights at t=1
weights <- matrix(rep(0, N*n), c(N, n))
weights[,1] <- rep(1/N, N)
for(t in 2:n)
{
# TO DO: resampling goes here
}
}
N <- 10
particles <-
list(1:10)
list(list(1:10))
n <- 5
N <- 5
(part <- as.list(1:n))
lapply(part, list(1:2))
part[[1]] <- c(c(3,4),5)
parts[1,1] <- list(1:10)
part[[1]] <- as.list(1:2)
list(p1 = list(1:n),
p2 = list(1:n))
list(lapply(list))
part <- lapply(1:n, list)
lapply(lapply(1:n, list), function(x){x = as.list(1:2)})
lapply(lapply(1:n, list), function(x){x = as.list(1:2)})
part <- lapply(1:n, function(x){x = as.list(1:2)})
lapply(1:N, function(x){list(as.name(paste('p', x, sep="")) = part)})
lapply(1:N, function(x){list(x = part)}) # correct but want to remove x
lapply(1:N, function(x){list(part)})
lapply(1:N, function(p){list(paste(p, p, sep) = part)})
lapply(part, list)
lapply(lapply(all.clusters, function(x){s[1] %in% x}), function(x){if(isTRUE(x){x})}
#****************************************************
#'  Perform uniform permutation on closure of anchors
#'
#' @param s Anchors  [vector]
#' @param s.bar Closure of anchors [vector]
#' @return Uniform permutation [vector]
SamplePermutation <- function(s, s.bar)
{
c(sample(s), sample(s.bar[! s.bar %in% s]))
}
## Test
# s <- c(6, 9)
# s.bar <- c(4, 7, 8, 1, 2, 6, 3, 9)
# SamplePermutation(s, s.bar)
#****************************************************
#'  Mapping from allocation decisions to clustering
#'
#' @param sigma Uniform permutation on closure of anchors (output from SamplePermutation) [vector]
#' @param particle sequence of allocation decisions (1-4) [vector]
#' @return corresponding clustering [list]
MapAllocationsToClusters <- function(sigma, particle)
{
# At t=1: if step 2 is merge then we merge throughout and return output
if(particle[2] == 2)
{
return(list("cluster1" = sigma,
"cluster2" = NULL))
}
# At t=1: otherwise split - assign an anchor to each cluster
n <- length(sigma)
cluster1 <- cluster2 <- rep(0, n)
cluster1[1] <- sigma[1]
cluster2[1] <- sigma[2]
# Then for t=3,...,n: calculate clustering from decisions #3 and #4
counter.c1 <- counter.c2 <- 2
for(t in 3:n)
{
if(particle[t] == 3) # decision #3 adds to cluster 1
{
cluster1[counter.c1] <- sigma[t]
counter.c1 <- counter.c1 + 1
}
if(particle[t] == 4) # decision #4 adds to cluster 2
{
cluster2[counter.c2] <- sigma[t]
counter.c2 <- counter.c2 + 1
}
}
return(list("cluster1" = cluster1[cluster1!=0],
"cluster2" = cluster2[cluster2!=0]))
}
## Test
p1 <- c(1, 4, 4, 3, 4, 3, 4, 4)
p2 <- c(1, 4, 3, 3, 4, 3, 4, 3)
p3 <- c(1, 2, 2, 2, 2, 2, 2, 2)
MapAllocationsToClusters(sigma = s.bar, particle = p1)
#****************************************************
#'  Mapping from clustering to allocation decisions
#'
#' @param sigma Uniform permutation on closure of anchors (output from SamplePermutation) [vector]
#' @param cluster.list list consisting of cluster1 and cluster2 [list]
#' @return corresponding allocation decison [vector]
MapClustersToAllocations<- function(sigma, cluster.list)
{
n <- length(sigma)
c1 <- cluster.list$cluster1; len1 <- length(c1)
c2 <- cluster.list$cluster2; len2 <- length(c2)
# if only 1 cluster, then allocation decision was merge
if(is.null(c2))
{
return(c(1, rep(2, n-1)))
}
# otherwise work backwards from clustering
particle <- rep(0, n); particle[1:2] <- c(1, 4)
counter.c1 <- counter.c2 <- 2
for(t in 3:n)
{
# if cluster 1 is not yet accounted for AND the relevant sigma comes from cluster 1
if(counter.c1 <= len1 && sigma[t] == c1[counter.c1])
{
particle[t] <- 3
counter.c1 <- counter.c1 + 1
}
# if cluster 2 is not yet accounted for AND the relevant sigma comes from cluster 2
if(counter.c2 <= len2 && sigma[t] == c2[counter.c2])
{
particle[t] <- 4
counter.c2 <- counter.c2 + 1
}
}
return(particle)
}
## Test
cluster.list <- MapAllocationsToClusters(sigma = s.bar, particle = p1)
MapClustersToAllocations(sigma = s.bar, cluster.list)
p3
#****************************************************
#'  Proposal distribution
#'
#' @param sigma Uniform permutation on closure of anchors (output from SamplePermutation) [vector]
#' @param prev.allocation Previous allocation decision [scalar]
#' @return
Proposal <- function(sigma, prev.allocation)
{
}
#****************************************************
#'  Improved intermediate target distribution ("Gamma hat")
#'
#' @param sigma Uniform permutation on closure of anchors (output from SamplePermutation) [vector]
#' @param prev.allocation Previous allocation decision [scalar]
#' @return
ImprovedIntermediateTarget <- function()
{
}
#****************************************************
#'  Intermediate target distribution at time t ("Gamma"_t)
#'
#' @param sigma Uniform permutation on closure of anchors (output from SamplePermutation) [vector]
#' @param particle Sequence of allocation decisions at time t [vector]
#' @return
IntermediateTarget <- function(sigma, particle)
{
}
#****************************************************
#'  Particle Gibbs Split Merge algorithm
#'
#' @param s Anchors  [vector]
#' @param s.bar Closure of anchors [vector]
#' @param c.bar Restricted clusters
#' @param pi.bar Restricted target
#' @param N Number of particles
#' @return Updated clustering
ParticleGibbsSplitMerge <- function(s, s.bar, c.bar, pi.bar, N)
{
# uniform permutation on elements of s.bar - with anchors 1st and 2nd
sigma <- SamplePermutation(s, s.bar)
n <- length(sigma)
# calculate the conditional path
cond.path <- MapClustersToAllocations(sigma = s.bar, cluster.list = c.bar)
# define particle matrix & fix 1st particle of each generation to conditional path
particles <- matrix(rep(0, N*n), c(N, n))
particles[1,] <- cond.path
particles[,1] <- rep(1, N)
# define importance weights matrix and define weights at t=1
weights <- matrix(rep(0, N*n), c(N, n))
weights[,1] <- rep(1/N, N)
for(t in 2:n)
{
# TO DO: resampling goes here
}
}
N <- 10
particles <-
list(1:10)
list(list(1:10))
n <- 5
N <- 5
(part <- as.list(1:n))
lapply(part, list(1:2))
part[[1]] <- c(c(3,4),5)
parts[1,1] <- list(1:10)
part[[1]] <- as.list(1:2)
list(p1 = list(1:n),
p2 = list(1:n))
list(lapply(list))
part <- lapply(1:n, list)
lapply(lapply(1:n, list), function(x){x = as.list(1:2)})
lapply(lapply(1:n, list), function(x){x = as.list(1:2)})
part <- lapply(1:n, function(x){x = as.list(1:2)})
lapply(1:N, function(x){list(as.name(paste('p', x, sep="")) = part)})
lapply(1:N, function(x){list(x = part)}) # correct but want to remove x
lapply(1:N, function(x){list(part)})
lapply(1:N, function(p){list(paste(p, p, sep) = part)})
lapply(part, list)
lapply(lapply(all.clusters, function(x){s[1] %in% x}), function(x){if(isTRUE(x){x})})
lapply(lapply(all.clusters, function(x){s[1] %in% x}), function(x){if(isTRUE(x)){x}})
lapply(all.clusters, function(x){s[1] %in% x})
lapply(all.clusters, function(x){s[2] %in% x})
sapply(all.clusters, function(x){s[2] %in% x})
which(isTRUE(sapply(all.clusters, function(x){s[2] %in% x})))
isTRUE(sapply(all.clusters, function(x){s[2] %in% x}))
sapply(all.clusters, function(x){s[2] %in% x})
which(sapply(all.clusters, function(x){s[2] %in% x}) == TRUE)
which(sapply(all.clusters, function(x){s[1] %in% x}) == TRUE)
which(sapply(all.clusters, function(x){s[2] %in% x}) == TRUE)
as.double(which(sapply(all.clusters, function(x){s[1] %in% x}) == TRUE))
as.double(which(sapply(all.clusters, function(x){s[2] %in% x}) == TRUE))
for(i in 1:2){as.double(which(sapply(all.clusters, function(x){s[2] %in% x}) == TRUE))}
for(i in 1:2)
{
as.double(which(sapply(all.clusters, function(x){s[2] %in% x}) == TRUE))
}
for(i in 1:2)
{
as.double(which(sapply(all.clusters, function(x){s[i] %in% x}) == TRUE))
}
for(i in 1:2)
{
return(as.double(which(sapply(all.clusters, function(x){s[i] %in% x}) == TRUE)))
}
as.double(which(sapply(all.clusters, function(x){s[1] %in% x}) == TRUE))
as.double(which(sapply(all.clusters, function(x){s[2] %in% x}) == TRUE))
c.bar <- c(0, 0)
for(i in 1:2)
{
c.bar[i] <- as.double(which(sapply(all.clusters, function(x){s[i] %in% x}) == TRUE))
}
c.bar
s
as.double(which(sapply(all.clusters, function(x){s[1] %in% x}) == TRUE))
sapply(1:2, function(z){as.double(which(sapply(all.clusters, function(x){s[z] %in% x}) == TRUE))})
c.bar <- sapply(1:2,
function(z)
{
as.double(which(sapply(all.clusters, function(x){s[z] %in% x}) == TRUE))
})
c.bar
all.clusters
all.clusters[[c.bar]]
all.clusters[[1]]
all.clusters[[2]]
all.clusters[[c(4,3)]]
all.clusters[[4]][[3]]
all.clusters$cluster
paste("cluster", c.bar[1], sep="")
all.clusters$paste("cluster", c.bar[1], sep="")
paste("cluster", c.bar[1], sep="")
all.clusters$get(paste("cluster", c.bar[1], sep=""))
all.clusters
c.bar
paste("cluster", c.bar[1], sep="")
paste(all.clusters$, paste("cluster", c.bar[1], sep=""), sep="")
paste(all.clusters$, paste("cluster", c.bar[1], sep=""))
paste(all.clusters, "$", paste("cluster", c.bar[1], sep=""))
paste(all.clusters, "$", paste("cluster", c.bar[1], sep=""), sep="")
c.bar[1]
paste("cluster", c.bar[1], sep="")
paste(all.clusters,sep="")
paste("all.clusters$", paste("cluster", c.bar[1], sep=""), sep="")
get(paste("all.clusters$", paste("cluster", c.bar[1], sep=""), sep=""))
paste("all.clusters$", paste("cluster", c.bar[1], sep=""), sep="")
get(paste("all.clusters$", paste("cluster", c.bar[1], sep=""), sep=""))
get(get(paste("all.clusters$", paste("cluster", c.bar[1], sep=""), sep="")))
get(get(paste("all.clusters$", paste("cluster", c.bar[1], sep=""), sep="")))
50 * 0.2
50 * 0.5
50 * 0.33
c.bar
all.clusters
c.bar
all.clusters[[c.bar[1]]]
c.bar
all.clusters[[c.bar[1]]]
all.clusters[[c.bar[2]]]
s
c.bar.index <- sapply(1:2,
function(z)
{
as.double(which(sapply(all.clusters, function(x){s[z] %in% x}) == TRUE))
})
c.bar.index
c.bar <- list("cluster1" = all.clusters[[c.bar.index[1]]],
"cluster2" = all.clusters[[c.bar.index[2]]])
c.bar
all.clusters
s
c.bar
unlist(c.bar)
as.double(unlist(c.bar))
c.bar
c.bar
s.bar
s.bar <- as.double(unlist(c.bar))
s.bar
factorial(3)
all.clusters
length(all.clusters)
c.bar
length(c.bar)
tau1 <- function(alpha, j)
{
alpha^j
}
tau2 <- function(j)
{
factorial(j-1)
}
particle
ifelse(particle[2]==2, 1, 2)
particle[2]=2
ifelse(particle[2]==2, 1, 2)
particle[2]=4
particle
ifelse(particle[2]==2, 1, 2)
current.cbar.cardinality + length(all.clusters) - length(c.bar)
current.cbar.cardinality <- ifelse(particle[2]==2, 1, 2)
current.cbar.cardinality + length(all.clusters) - length(c.bar)
length(c.bar)
current.cbar.cardinality
length(all.clusters)
c.bar
1-0.29
0.71*0.8
0.71*0.17
0.71*0.19
all.clusters
s
c.bar
rm(list = ls())
library(Matrix)
library(igraph)
library(matrixStats)
library(LaplacesDemon)
source("PGSMsFunctions.R")
#****************************************************
# generate SBM
n <- 20 # no. nodes
K <- 4  # no. clusters
#pref.matrix <- diag(K) # Bernoulli rates (K x K matrix)
#block.sizes <- rep(4, K) # no. nodes in each cluster (K length vector)
#sbm <- sample_sbm(n, pref.matrix, block.sizes, directed = FALSE, loops = FALSE); plot(sbm)
set.seed(2)
sbm <- sample_sbm(n = 20,
pref.matrix = forceSymmetric(matrix(runif(K^2), (c(K, K)))),
block.sizes = c(6, 4, 7, 3), directed = FALSE, loops = FALSE); plot(sbm)
start.clusters <- list(1:n) # list of clusters
adj <- as_adj(sbm)
# PGSMs tuning parameters
alpha <- 1 # Dirichlet process parameter
beta1 <- 1 # Flat uniform priors (McDaid: conjugate priors on the parameter for each cluster)
beta2 <- 1
N <- 5    # no. particles: (Bouchard uses 20)
resampling.threshold <- 0.5
n.iters <- 100000
# perform PGSMs
clusters <- start.clusters
num.clusters <- rep(0, n.iters)
start <- proc.time()
for(i in 1:n.iters)
{
clusters <- SplitMerge(clusters, adj, N, resampling.threshold, alpha, beta1, beta2)
if(i %% 10 == 0) {cat(paste0("iteration: ", i, "\n"))}
num.clusters[i] <- length(clusters)
print(num.clusters[i])
}
(run.time <- proc.time() - start)
setwd("C:/Users/dt915355/Dropbox/Postdoc/Code/ParticleGibbsforSBMs")
rm(list = ls())
library(Matrix)
library(igraph)
library(matrixStats)
library(LaplacesDemon)
source("PGSMsFunctions.R")
#****************************************************
# generate SBM
n <- 20 # no. nodes
K <- 4  # no. clusters
#pref.matrix <- diag(K) # Bernoulli rates (K x K matrix)
#block.sizes <- rep(4, K) # no. nodes in each cluster (K length vector)
#sbm <- sample_sbm(n, pref.matrix, block.sizes, directed = FALSE, loops = FALSE); plot(sbm)
set.seed(2)
sbm <- sample_sbm(n = 20,
pref.matrix = forceSymmetric(matrix(runif(K^2), (c(K, K)))),
block.sizes = c(6, 4, 7, 3), directed = FALSE, loops = FALSE); plot(sbm)
start.clusters <- list(1:n) # list of clusters
adj <- as_adj(sbm)
# PGSMs tuning parameters
alpha <- 1 # Dirichlet process parameter
beta1 <- 1 # Flat uniform priors (McDaid: conjugate priors on the parameter for each cluster)
beta2 <- 1
N <- 5    # no. particles: (Bouchard uses 20)
resampling.threshold <- 0.5
n.iters <- 100000
# perform PGSMs
clusters <- start.clusters
num.clusters <- rep(0, n.iters)
start <- proc.time()
for(i in 1:n.iters)
{
clusters <- SplitMerge(clusters, adj, N, resampling.threshold, alpha, beta1, beta2)
if(i %% 10 == 0) {cat(paste0("iteration: ", i, "\n"))}
num.clusters[i] <- length(clusters)
print(num.clusters[i])
}
(run.time <- proc.time() - start)
save.image("C:/Users/dt915355/Dropbox/Postdoc/Code/ParticleGibbsforSBMs/Workspaces/20nodes4Clust1StartClust5Particles100kIters.RData")
